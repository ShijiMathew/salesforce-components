name: Branch Naming Policy Check and Validate new changes

on:
    pull_request:
        types: [opened, synchronize]
        branches: [main]

permissions:
    id-token: write
    contents: write
    packages: write

jobs:
    branch-naming-policy:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Run Branch Naming Policy Action
              uses: nicklegan/github-repo-branch-naming-policy-action@v1.1.0
              if: github.ref_type == 'branch'
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  regex: "^(CRM)-([0-9]+)-([a-zA-Z]+)"

    format-lint:
        runs-on: ubuntu-latest
        needs: branch-naming-policy
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            - name: "Checkout source code"
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: "Install Volta"
              uses: volta-cli/action@v4

            - name: "Restore node_modules cache"
              id: cache-npm
              uses: actions/cache@v3
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            - name: "Install npm dependencies"
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: HUSKY=0 npm ci

            - name: "Code formatting verification with Prettier"
              run: npm run prettier:verify

            - name: "Check file existence"
              id: check_files
              uses: andstor/file-existence-action@v2
              with:
                  files: "**/{lwc,aura}/**/*.js"

            - name: "Lint Lightning Web Components / Aura Components"
              if: steps.check_files.outputs.files_exists == 'true'
              run: npm run lint

    validate-on-sit-org:
        runs-on: ubuntu-latest
        needs: format-lint
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            - uses: actions/setup-node@v3
              with:
                  node-version: "16"

            - name: "Checkout source code"
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: "Read PR Body"
              env:
                  PR_BODY: ${{github.event.pull_request.body}}
              run: |
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt)       
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

            - name: Install NPM
              run: |
                  npm install

            - name: Install SFDX
              run: |
                  npm install @salesforce/cli --global
                  sf version

            - name: Install sfdx git delta
              run: |
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins

            - name: "Installing java"
              run: |
                  sudo apt-get update
                  sudo apt install default-jdk

            - name: "Installing SFDX scanner"
              run: sfdx plugins:install @salesforce/sfdx-scanner

            - name: "Populate auth file with SFDX_URL secret of sit org"
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt

            - name: "Create delta packages for new, modified or deleted metadata"
              run: |
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD~1" --output changed-sources/ --generate-delta --source force-app/

            # Authenticate to org
            - name: "Authenticate to Integration Org"
              run: sf org login sfdx-url --sfdx-url-file ./SFDX_INTEGRATION_URL.txt --set-default --alias integration
